/**
 * Script ƒë·ªÉ convert timestamps sang datetime readable
 */

const mongoose = require('mongoose');
const VideoStream = require('./src/models/videoStream');

// H√†m convert timestamp sang readable datetime
const convertTimestamp = (timestamp) => {
  if (!timestamp || timestamp === 0) return 'N/A';
  
  // Convert Unix timestamp (seconds) to Date
  const date = new Date(timestamp * 1000);
  
  // Format theo timezone Vi·ªát Nam (UTC+7)
  const options = {
    timeZone: 'Asia/Ho_Chi_Minh',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  };
  
  return date.toLocaleString('vi-VN', options);
};

// H√†m convert v√† hi·ªÉn th·ªã d·ªØ li·ªáu VideoStream
const convertVideoStreamTimestamps = async () => {
  try {
    console.log('üîç Fetching VideoStream data...');
    
    const videoStreams = await VideoStream.find({})
      .select('match_id match_time home away comp')
      .sort({ match_time: -1 })
      .limit(20);
    
    console.log(`\nüìã Found ${videoStreams.length} video streams\n`);
    
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ Match ID        ‚îÇ Datetime (VN)         ‚îÇ Match Details                           ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    
    videoStreams.forEach(stream => {
      const datetime = convertTimestamp(stream.match_time);
      const matchInfo = `${stream.home || 'N/A'} vs ${stream.away || 'N/A'}`;
      const comp = stream.comp || 'N/A';
      
      console.log(`‚îÇ ${stream.match_id.padEnd(15)} ‚îÇ ${datetime.padEnd(21)} ‚îÇ ${(matchInfo + ' (' + comp + ')').padEnd(39)} ‚îÇ`);
    });
    
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    
    return videoStreams;
    
  } catch (error) {
    console.error('‚ùå Error converting VideoStream timestamps:', error.message);
    throw error;
  }
};

// H√†m convert timestamps cho c√°c models kh√°c
const convertOtherTimestamps = async () => {
  try {
    console.log('\nüîç Checking other models with timestamps...\n');
    
    // Check Season model
    const Season = require('./src/models/season');
    const seasons = await Season.find({}).limit(5);
    
    if (seasons.length > 0) {
      console.log('üìÖ Season timestamps:');
      seasons.forEach(season => {
        console.log(`- ID: ${season.id}`);
        console.log(`  Start: ${convertTimestamp(season.start_time)}`);
        console.log(`  End: ${convertTimestamp(season.end_time)}`);
        console.log(`  Updated: ${convertTimestamp(season.updated_at)}`);
        console.log('');
      });
    }
    
    // Check Team model
    const Team = require('./src/models/team');
    const teams = await Team.find({}).limit(3);
    
    if (teams.length > 0) {
      console.log('üèà Team timestamps:');
      teams.forEach(team => {
        console.log(`- ${team.name || team.id}`);
        console.log(`  Foundation: ${convertTimestamp(team.foundation_time)}`);
        console.log(`  Updated: ${convertTimestamp(team.updated_at)}`);
        console.log('');
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error converting other timestamps:', error.message);
  }
};

// Main function
const main = async () => {
  try {
    console.log('üöÄ Starting timestamp conversion...\n');
    
    // Connect to MongoDB
    await mongoose.connect('mongodb://localhost:27017/thesports', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ Connected to MongoDB\n');
    
    // Convert VideoStream timestamps
    await convertVideoStreamTimestamps();
    
    // Convert other model timestamps
    await convertOtherTimestamps();
    
    console.log('‚úÖ Timestamp conversion completed!');
    
  } catch (error) {
    console.error('‚ùå Conversion failed:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB');
    process.exit(0);
  }
};

// Export c√°c utility functions
module.exports = {
  convertTimestamp,
  convertVideoStreamTimestamps,
  convertOtherTimestamps
};

// Run n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  main();
}
